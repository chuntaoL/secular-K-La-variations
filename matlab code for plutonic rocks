%matlab code for calculation secular K/La of plutonic rocks
%put supplementary files (SM_Table 2 and SM_Table 3) and code files in the same folder at MATLAB；
%read raw data in Excel file
m1=xlsread('SM_Table 3','Plutonic samples','Z3:Z2612');%read data of La
m2=xlsread('SM_Table 3','Plutonic samples','H3:H2612');%read data of Latitude
m3=xlsread('SM_Table 3','Plutonic samples','I3:I2612');%read data of Longitude
m4=xlsread('SM_Table 3','Plutonic samples','L3:L2612');%read data of Age
m5=xlsread('SM_Table 3','Plutonic samples','K3:K2612');%read data of Max_Age
m6=xlsread('SM_Table 3','Plutonic samples','W3:W2612');%read data of K2O

%raw data cleansing
m7=m5-m4;%subtract Max_Age from Age
id1=m7<0;%if m7<0, raw data is mistakenly added into the dataset and should be deleted.
m1(id1,:)=[];
m2(id1,:)=[];
m3(id1,:)=[];
m4(id1,:)=[];
m5(id1,:)=[];
m6(id1,:)=[];

% delete invalid data 
id2=m1==0;
m1(id2,:)=[];
m2(id2,:)=[];
m3(id2,:)=[];
m4(id2,:)=[];
m5(id2,:)=[];
m6(id2,:)=[];
% 
id3=m6==0;
m1(id3,:)=[];
m2(id3,:)=[];
m3(id3,:)=[];
m4(id3,:)=[];
m5(id3,:)=[];
m6(id3,:)=[];

%delete NAN data
id4=isnan(m4);%
m1(id4,:)=[];
m2(id4,:)=[];
m3(id4,:)=[];
m4(id4,:)=[];
m5(id4,:)=[];
m6(id4,:)=[];

id5=isnan(m1);%
m1(id5,:)=[];
m2(id5,:)=[];
m3(id5,:)=[];
m4(id5,:)=[];
m5(id5,:)=[];
m6(id5,:)=[];

id6=isnan(m6);%
m1(id6,:)=[];
m2(id6,:)=[];
m3(id6,:)=[];
m4(id6,:)=[];
m5(id6,:)=[];
m6(id6,:)=[];

m7=m5-m4;%uncertainty of samples' age

%allocate storage
weig=ones(size(m1,1),1);%
WEI=ones(size(m1,1),1);%
ka=ones(size(m1,1),1);
kb=ones(size(m1,1),1);
t=0;
a1=ones(size(m1,1),1);
a2=ones(size(m1,1),1);
a3=ones(size(m1,1),1);

% calculate weight for every sample
for z=1:size(m2,1);
    %randomly generate a number 
    randage1=m7(z,1)*randn(100,1)+m4(z,1);%normal distribution matrix 
    randnumage1=randperm(length(randage1)); %
    outage1=randage1(randnumage1(1));%
    
    randLat1=0.01*m2(z,1)*randn(100,1)+m2(z,1);%
    randnumLat1=randperm(length(randLat1)); %
    outLat1=randLat1(randnumLat1(1));%
    
    randLon1=0.01*m3(z,1)*randn(100,1)+m3(z,1);%
    randnumLon1=randperm(length(randLon1)); %
    outLon1=randLon1(randnumLon1(1));%
    
    a1(z,1)=outage1;
    a2(z,1)=outLat1;
    a3(z,1)=outLon1;
            
end
h1=waitbar(0);
for ii=1:size(m2,1);
   str1=['Weight calculation......',num2str(ii/size(m2,1)*100),'%'];%show process bar
   waitbar(ii/size(m2,1),h1,str1);
   outLat=a2(ii,1);
   outLon=a3(ii,1);
   outage=a1(ii,1);
    if  isnan(m1(ii,1)) || isnan(m6(ii,1));%判
        WEI(ii,1)=0;%
    else
        for j1=1:size(m2,1);
            ka=1./(((a2(j1,1)-outLat)./2).^2+((a3(j1,1)-outLon)./2).^2+1);
            kb=1./(((a1(j1,1)-outage)./75).^2+1);
            weig(j1,1)=ka+kb;%
        end
        a=nansum(weig);
        WEI(ii,1)=1./(a./0.2);%
    end    
end
close (h1)
for jj=1:size(WEI,1);
    if isnan(WEI(jj,1));
        WEI(jj,1)=0;
    else
        WEI(jj,1)=WEI(jj,1);
    end
end
WEI_1=WEI;
[p1,p2]=find(WEI==inf);%
%
delLa=m1;
delage=m4;
delMage=m5;
delK=m6;
%
delage(p1,:)=[];
delLa(p1,:)=[];
delMage(p1,:)=[];
delK(p1,:)=[];
delerr=delMage-delage;%
%allocate storage
fixLa=ones(size(p1,1),1);
fixage=ones(size(p1,1),1);
fixMage=ones(size(p1,1),1);
fixK=ones(size(p1,1),1);
%%%Weight should be deleted, if it is inf.
WEI_1(p1,:)=[];
WEIPRO=WEI_1./nansum(WEI_1);%calculate probability of occurrence of every sample
WEIPRO=WEIPRO';
%allocate storage
boot=[];
boot1=ones(size(delage,1),1);%
boot2=ones(size(delage,1),1);%
boot4=ones(size(delage,1),1);%
boot3=ones(size(m1,1),1);
bLa=ones(size(m1,1),1);
bage=ones(size(m1,1),1);
bK=ones(size(m1,1),1);
bK_La=ones(size(m1,1),1);

%resampling process
m=0;
h2=waitbar(0);
for i=1:10000;%10,000 times simulations
    str2=['Resampling process......',num2str(i/10000*100),'%'];%show process bar
    waitbar(i/10000,h2,str2);
    n=0;%
for pos=1:size(p1,1);
    randfage=m7(p1(pos,1),1)*randn(100,1)+m4(p1(pos,1),1);%
    randfnumage=randperm(length(randfage)); %
    outfage=randfage(randfnumage(1));%
    
    randfLa=0.02*m1(p1(pos,1),1)*randn(100,1)+m1(p1(pos,1),1);%
    randfnumLa=randperm(length(randfLa)); %
    outfLa=randfLa(randfnumLa(1));%
    
    randfK=0.02*m6(p1(pos,1),1)*randn(100,1)+m6(p1(pos,1),1);%
    randfnumK=randperm(length(randfK)); %
    outfK=randfK(randfnumK(1));%
    
    fixage(pos,1)=outfage;%
    fixLa(pos,1)=outfLa;%
    fixK(pos,1)=outfK.*10000.*0.83013;%
end
   r=(1:size(delage,1));
   rr=randsrc(size(delage,1),1,[r;WEIPRO]);
   for j=1:size(delage,1);
    randage=delerr(rr(j,1),1)*randn(100,1)+delage(rr(j,1),1);%
    randnumage=randperm(length(randage)); %
    outage=randage(randnumage(1));%
    
    randLa=0.02*delLa(rr(j,1),1)*randn(100,1)+delLa(rr(j,1),1);%
    randnumLa=randperm(length(randLa)); %
    outLa=randLa(randnumLa(1));%
    
    randK=0.02*delK(rr(j,1),1)*randn(100,1)+delK(rr(j,1),1);%
    randnumK=randperm(length(randK)); %
    outK=randK(randnumK(1));%
    
    n=n+1;
    boot1(n,1)=outage;
    boot2(n,1)=outLa;%
    boot4(n,1)=outK.*10000.*0.83013;%
   end

   bage=[fixage;boot1];
   bLa=[fixLa;boot2];
   bK=[fixK;boot4];
   bK_La=bK./bLa;
   boot=[bage bK_La];
    
   %
   boot3=sortrows(boot,1);
    
   % set 100-million-year as a bin 
    for L=1:36;
    [tL,nL]=find(boot3(:,1)>(L-1)*100&boot3(:,1)<=L*100);
    binL=boot3(min(tL):max(tL),2);
    aveL=nanmean(binL);
    sdL=2*nanstd(binL);
    Ave(1,L)=aveL;
    end
    AVe(i,1:36)=Ave;
 end
 close (h2)
%calculate mean and standard error of the mean of every bin
AVE=ones(36,1);
SE=ones(36,1);
SD=ones(36,1);
for p=1:36
AVep=nanmean(AVe(:,p));
Sdp=nanstd(AVe(:,p));
AVE(p,1)=AVep;
SE(p,1)=Sdp;
end
age=(50:100:3550);
age=age';
hold on
figure(1)
errorbar(age,AVE,SE)%plot secular K/La of plutonic rocks
